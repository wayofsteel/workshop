--[[ WoS Enemy Public Resolve and Stunt Counter
--]]
function onSave()
    return JSON.encode(stats)
end

function onLoad(saved_data)
    --stats = JSON.decode(saved_data) or build_buttons()
    --create_buttons()
    stats = JSON.decode(saved_data) or the_stupid_way()
    create_buttons_stupid()
end

function create_buttons()
    for index, stat in pairs(stats)
    do
        self.createButton(stat.button)
    end
end

function create_buttons_stupid()
    self.createButton({
      font_size= 200,
      function_owner= self,
      height= 300,
      width= 300,
      click_function= "update_known_damage",
      color = {r=157/255, g=157/255, b=157/255},
      hover_color=     {
          r= 100/255,
          g= 100/255,
          b= 100/255,
        },
      position=     {
          x= 0,
          y= 0.1,
          z= -1.5,
        },
    })
    self.createButton({
      font_size= 200,
      function_owner= self,
      height= 100,
      width= 100,
      click_function= "update_stunt_off",
      color = {r=157/255, g=157/255, b=157/255},
      font_color=     {
          r= 183/255,
          g= 0/255,
          b= 37/255,
        },
        hover_color=     {
            r= 183/255,
            g= 0/255,
            b= 37/255,
          },
      position=     {
          x= 0.75,
          y= 0.1,
          z= -1.2,
        },
      rotation= {
          x = 0,
          y = 90,
          z = 0
      }
    })
    self.createButton({
      font_size= 100,
      function_owner= self,
      height= 100,
      width= 100,
      click_function= "update_stunt_def",
      color = {r=157/255, g=157/255, b=157/255},
      font_color=     {
          39/255,
          199/255,
          93/255,
        },
        hover_color=     {
            39/255,
            199/255,
            93/255,
          },
      position=     {
          x= 0.5,
          y= 0.1,
          z= -1.2,
        },
        rotation= {
            x = 0,
            y = 90,
            z = 0
        }
    })
    self.createButton({
      font_size= 100,
      function_owner= self,
      height= 100,
      width= 100,
      click_function= "update_stunt_mob",
      color = {r=157/255, g=157/255, b=157/255},
      font_color=     {
          r= 109/255,
          g= 161/255,
          b= 253/255,
        },
        hover_color=     {
            r= 109/255,
            g= 161/255,
            b= 253/255,
          },
      position=     {
          x= -0.5,
          y= 0.1,
          z= -1.2,
        },
        rotation= {
            x = 0,
            y = 90,
            z = 0
        }
    })
    self.createButton({
      font_size= 100,
      function_owner= self,
      height= 100,
      width= 100,
      click_function= "update_stunt_tac",
      color = {r=157/255, g=157/255, b=157/255},
      font_color=     {
          r= 236/255,
          g= 198/255,
          b= 59/255,
        },
        hover_color=     {
            r= 236/255,
            g= 198/255,
            b= 59/255,
          },
      position=     {
          x= -0.75,
          y= 0.1,
          z= -1.2,
        },
        rotation= {
            x = 0,
            y = 90,
            z = 0
        }
    })
end

function build_button(expansions, base_type)
    local button_types = {
        ["resolve"] = get_default_resolve_button,
        ["stunt"] = get_default_stunt_button,
    }
    local button_base = button_types[base_type]()
    local btn = {}
    for key, val in pairs(button_base)
    do
        btn[key] = val
    end

    for key, val in pairs(expansions)
    do
        btn.button[key] = val
    end

    return btn
end

function build_buttons()
    local stats_array = {}
    local arr_idx = 0
    local button_build_list = get_button_build_list()
    for _, button_type in ipairs(button_build_list)
    do
        for button_type_name, button_series in pairs(button_type)
        do
            for series_idx, button_instance in ipairs(button_series)
            do
               stats_array[arr_idx] = build_button(button_instance, button_type_name)
               arr_idx = arr_idx + 1
            end
        end
    end
    return stats_array
end

function get_button_build_list()
    return {
        {
            ["resolve"] =  {
                {
                    click_function = "update_known_damage",
                    hover_color = {r=100, g=100, b=100},
                    position = { x = 0.0, y = 0.1, z = -1.5 }
                }
            }
        },
        {
            ["stunt"] = {
                {
                    click_function = "update_stunt_off",
                    font_color = {r=183, g=0, b=37}, -- "#B70025"
                    position = { x = .75, y = 0.1, z = -1.5 }
                },
                {
                    click_function = "update_stunt_def",
                    font_color = {r=39, g=199, b=93}, -- #27C75D
                    position = { x = .5, y = 0.1, z = -1.5 },
                },
                {
                    click_function = "update_stunt_mob",
                    font_color = {r=109, g=161, b=253}, -- #6DA1FD
                    position = { x = -.5, y = 0.1, z = -1.5 }
                },
                {
                    click_function = "update_stunt_tac",
                    font_color = {r=236, g=198, b=59}, -- #ECC63B
                    position = { x = -.75, y = 0.1, z = -1.5 }
                }
            }
        }
    }
end

function get_default_stunt_button()
    return {
        vals = {
            count = 0,
            label_function = function(x) return string.rep("· ", x) end,
            min = 0
        },
        button = {
            font_size = 100,
            function_owner = self,
            height = 100,
            width = 100
        }
    }
end

function get_default_resolve_button()
    return {
        vals = {
            count = 0,
            label_function = function(x) return tostring(x) end,
            min = -10
        },
        button = {
            font_size = 200,
            function_owner = self,
            height = 300,
            width = 300
        }
    }
end

function get_stat_index(name)
    for index, stat in pairs(stats)
    do
        if stat.button.click_function == name then return index end
    end
end

function get_new_count(is_rclick, old_count, minimum)
    local new_count = old_count + (is_rclick and -1 or 1)
    return new_count >= minimum and new_count or minimum
end

function update_stat_button(is_rclick, name)
    local label_funcs = {
        ["resolve"] = function(x) return tostring(x) end,
        ["stunt"] = function(x) return string.rep("· ", x) end
    }

    local font_colors = {
        font_color = {r=39, g=199, b=93}, -- #27C75D
    }

    local stat_idx = get_stat_index(name)
    stat = stats[stat_idx]
    stat.vals.count = get_new_count(is_rclick, stat.vals.count, stat.vals.min)

    self.editButton({ -- Lua is 1-index, this dumb TTS function is 0-index
        index = stat_idx - 1,
        label = label_funcs[stat.vals.label_function]( stat.vals.count )
    })
    self.script_state = onSave()
end

function update_known_damage(obj, player, altclick)
    update_stat_button(altclick, "update_known_damage")
end

function update_stunt_off(obj, player, altclick)
    update_stat_button(altclick, "update_stunt_off")
end

function update_stunt_def(obj, player, altclick)
    update_stat_button(altclick, "update_stunt_def")
end

function update_stunt_mob(obj, player, altclick)
    update_stat_button(altclick, "update_stunt_mob")
end

function update_stunt_tac(obj, player, altclick)
    update_stat_button(altclick, "update_stunt_tac")
end

function the_stupid_way()
    return {
        {
            vals = {
                count = 0,
                label_function = "resolve",
                min = -10
            },
            button = {
                click_function= "update_known_damage"
            }
        },
        {
            vals = {
                count = 0,
                label_function = "stunt",
                min = 0
            },
            button = {
                click_function= "update_stunt_off"
            }
        },
        {
            vals = {
                count = 0,
                label_function = "stunt",
                min = 0
            },
            button = {
                click_function= "update_stunt_def"
            }
        },
        {
            vals = {
                count = 0,
                label_function = "stunt",
                min = 0
            },
            button = {
                click_function= "update_stunt_mob"
            }
        },
        {
            vals = {
                count = 0,
                label_function = "stunt",
                min = 0
            },
            button = {
                click_function= "update_stunt_tac"
            }
        }
    }
end
