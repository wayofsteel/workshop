--[[ WoS Enemy Public Resolve and Stunt Counter
--]]

function onSave()
    return JSON.encode(stats)
end

--[[ recordChange exists in case onSave's role has to expand
--]]
function recordChange()
    self.script_state = JSON.encode(stats)
end

function onLoad(saved_data)
    stats = JSON.decode(saved_data) or build_stats_table()
    create_buttons()
end

function onHover(player_color)
    make_buttons_invisible(false)
    Wait.time( function() make_buttons_invisible(true) end, 5)
end

function make_buttons_invisible(is_visible)
    local color_off = {r = 0, g = 0, b = 0, a = 0}
    for idx, btn in ipairs(self.getButtons())
    do
        curr_color = is_visible and color_off or btn.hover_color
        update_button( idx, { color = curr_color } )
    end
end

function create_buttons()
    for idx, stat in ipairs(stats)
    do
        self.createButton(stat.button)
        update_button(idx, {
            function_owner=self,
            click_function=stat.button.click_function
        })
    end
end

--[[ A helper function to compensate for editButton's use of a 0-index
--]]
function update_button(given_index, changes_table)
    changes_table.index = given_index - 1
    self.editButton(changes_table)
    recordChange()
end

function build_button(button_data)
    local curr_tbl = {}

    for attr_name, attr_table in pairs(button_data)
    do
        curr_tbl[attr_name] = get_stat_defaults(attr_name)
        for key, value in pairs(attr_table)
        do
            curr_tbl[attr_name][key] = value
        end
    end

    return curr_tbl
end

function build_stats_table()
    local stats_array = {}
    local button_build_list = get_button_build_list()

    for index, button_instance in ipairs(button_build_list)
    do
        stats_array[index] = build_button(button_instance)
    end

    return stats_array
end

function get_stat_index(name)
    for index, stat in pairs(stats)
    do
        if stat.button.click_function == name then return index end
    end
end

function get_new_count(old_count, minimum, adjustment)
    local adjusted_count = old_count + adjustment
    return adjusted_count >= minimum and adjusted_count or minimum
end

function update_count(stat, adjust)
    local count = get_new_count(stat.vals.count, stat.vals.min, adjust)
    stat.vals.count = count
    return count
end

function update_stat_count(is_rclick, name)
    local adjustment = is_rclick and -1 or 1
    local stat_idx = get_stat_index(name)
    local new_count = update_count(stats[stat_idx], adjustment)
    update_button( stat_idx, { label = tostring(new_count) } )
end

--[[ Button and Stat Functions and Default Data
--]]
function update_known_damage(obj, player, altclick)
    update_stat_count(altclick, "update_known_damage")
end

function update_stunt_off(obj, player, altclick)
    update_stat_count(altclick, "update_stunt_off")
end

function update_stunt_def(obj, player, altclick)
    update_stat_count(altclick, "update_stunt_def")
end

function update_stunt_mob(obj, player, altclick)
    update_stat_count(altclick, "update_stunt_mob")
end

function update_stunt_tac(obj, player, altclick)
    update_stat_count(altclick, "update_stunt_tac")
end

function get_stat_defaults(selection_name)
    local defaults_table = {
        ["button"] = {
            font_size = 200,
            height = 200,
            width = 200,
            color = { r = 0, g = 0, b = 0, a = 0}
        },
        ["vals"] = {
            count = 0,
            min = 0
        }
    }
    return defaults_table[selection_name]
end

function get_button_build_list()
    return {
        {
            ["button"] = {
                click_function = "update_known_damage",
                height = 300,
                width = 300,
                hover_color = { r = 100/255, g = 100/255, b = 100/255 },
                position = { x = 0, y = 0.1, z = -1.5}
            },
            ["vals"] = {
                min = -10
            }
        },
        {
            ["button"] = {
                click_function = "update_stunt_off",
                position = { x = -0.50, y = 0.1, z = -1.2 },
                hover_color = { r = 183/255, g = 0/255, b = 37/255 }-- "#B70025"
            },
            ["vals"] = {}
        },
        {
            ["button"] = {
                click_function = "update_stunt_def",
                hover_color = { r = 39/255, g = 199/255, b = 93/255 },-- #27C75D
                position = { x = -0.85, y = 0.1, z = -1.2 }
            },
            ["vals"] = {}
        },
        {
            ["button"] = {
                click_function = "update_stunt_mob",
                hover_color = { r = 109/255, g = 161/255, b = 253/255 },-- #6DA1FD
                position = { x = -1.2, y = 0.1, z = -1.2 }
            },
            ["vals"] = {}
        },
        {
            ["button"] = {
                click_function = "update_stunt_tac",
                hover_color = { r = 236/255, g = 198/255, b = 59/255 },-- #ECC63B
                position = { x = -1.55, y = 0.1, z = -1.2 }
            },
            ["vals"] = {}
        }
    }
end
